CREATE DATABASE airbnb_db;
USE airbnb_db;

-- Tables creation

CREATE TABLE USERS (
    USER_ID INT AUTO_INCREMENT PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    EMAIL VARCHAR(100) NOT NULL UNIQUE,
    PHONE_NUMBER VARCHAR(20) NOT NULL UNIQUE,
    ACCOUNT_TYPE ENUM('HOST', 'GUEST') NOT NULL,
    SIGNUP_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE LISTINGS (
    LISTING_ID INT AUTO_INCREMENT PRIMARY KEY, 
    TITLE VARCHAR(100) NOT NULL, 
    DESCRIPTION VARCHAR(100) NOT NULL, 
    PRICE_PER_NIGHT DECIMAL(10,5) NOT NULL, 
    LOCATION VARCHAR(100) NOT NULL, 
    NUMBER_OF_BEDROOMS INT NOT NULL, 
    NUMBER_OF_BATHROOMS INT NOT NULL, 
    HOST_ID INT NOT NULL, 
    FOREIGN KEY(HOST_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

CREATE TABLE BOOKINGS (
    BOOKING_ID INT AUTO_INCREMENT PRIMARY KEY, 
    GUEST_ID INT NOT NULL, 
    LISTING_ID INT NOT NULL, 
    START_DATE DATETIME NOT NULL, 
    END_DATE DATETIME NOT NULL, 
    TOTAL_PRICE INT NOT NULL, 
    STATUS VARCHAR(100) NOT NULL, 
    FOREIGN KEY(GUEST_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE, 
    FOREIGN KEY(LISTING_ID) REFERENCES LISTINGS(LISTING_ID) ON DELETE CASCADE
);


CREATE TABLE REVIEWS (
    REVIEW_ID INT AUTO_INCREMENT PRIMARY KEY, 
    GUEST_ID INT NOT NULL, 
    LISTING_ID INT NOT NULL, 
    RATING INT NOT NULL CHECK(RATING BETWEEN 1 AND 5), 
    TEXT TEXT NOT NULL, 
    DATE DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(GUEST_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE, 
    FOREIGN KEY(LISTING_ID) REFERENCES LISTINGS(LISTING_ID) ON DELETE CASCADE
);

CREATE TABLE PAYMENTS (
    PAYMENT_ID INT AUTO_INCREMENT PRIMARY KEY, 
    BOOKING_ID INT NOT NULL,
    AMOUNT DECIMAL(10,5) NOT NULL,
    PAYMENT_METHOD ENUM ('CREDIT_CARD', 'DEBIT_CARD', 'UPI', 'WALLET', 'BANK_TRANSFER') NOT NULL,
    PAYMENT_STATUS ENUM('PENDING', 'COMPLETED', 'FAILED', 'REFUNDED', 'CANCELLED') NOT NULL
);



-- Data insertions

INSERT INTO USERS (NAME, EMAIL, PHONE_NUMBER, ACCOUNT_TYPE) VALUES
('Alice Johnson', 'alice@example.com', '9876543210', 'HOST'),
('Bob Smith', 'bob@example.com', '9876543211', 'GUEST'),
('Charlie Brown', 'charlie@example.com', '9876543212', 'HOST'),
('Diana Ross', 'diana@example.com', '9876543213', 'GUEST');


INSERT INTO LISTINGS (TITLE, DESCRIPTION, PRICE_PER_NIGHT, LOCATION, NUMBER_OF_BEDROOMS, NUMBER_OF_BATHROOMS, HOST_ID) VALUES
('Cozy Apartment', 'A nice place to stay', 150.00, 'New York', 2, 1, 1),
('Luxury Villa', 'Spacious villa with pool', 500.00, 'Los Angeles', 4, 3, 3),
('Beach House', 'Amazing sea view', 300.00, 'Miami', 3, 2, 1);


INSERT INTO BOOKINGS (GUEST_ID, LISTING_ID, START_DATE, END_DATE, TOTAL_PRICE, STATUS) VALUES
(2, 1, '2025-04-10 14:00:00', '2025-04-15 11:00:00', 750, 'CONFIRMED'),
(4, 2, '2025-05-01 14:00:00', '2025-05-07 11:00:00', 3000, 'PENDING'),
(2, 3, '2025-06-10 14:00:00', '2025-06-12 11:00:00', 600, 'CANCELLED');


INSERT INTO REVIEWS (GUEST_ID, LISTING_ID, RATING, TEXT) VALUES
(2, 1, 5, 'Amazing place! Very clean and cozy.'),
(4, 2, 4, 'Great stay but a bit expensive.'),
(2, 3, 3, 'Nice location but could be cleaner.');


INSERT INTO PAYMENTS (BOOKING_ID, AMOUNT, PAYMENT_METHOD, PAYMENT_STATUS) VALUES
(1, 750.00, 'CREDIT_CARD', 'COMPLETED'),
(2, 3000.00, 'UPI', 'PENDING'),
(3, 600.00, 'DEBIT_CARD', 'REFUNDED');


-- Fetch data from tables

SELECT * FROM USERS;

SELECT * FROM LISTINGS;

SELECT * FROM BOOKINGS;

SELECT * FROM REVIEWS;

SELECT * FROM PAYMENTS;


-- Update existing records

UPDATE USERS SET EMAIL = 'alice.johnson@example.com', PHONE_NUMBER = '9998887776' WHERE USER_ID = 1;

UPDATE LISTINGS SET PRICE_PER_NIGHT = 175.00, DESCRIPTION = 'A newly renovated cozy apartment' WHERE LISTING_ID = 1;

UPDATE REVIEWS  SET RATING = 5, TEXT = 'Absolutely loved the place! Highly recommended.'WHERE REVIEW_ID = 3;

UPDATE PAYMENTS SET PAYMENT_STATUS = 'COMPLETED' WHERE PAYMENT_ID = 2;


-- Filtering and Sorting

SELECT * FROM LISTINGS WHERE LOCATION = 'New York';

SELECT * FROM LISTINGS ORDER BY PRICE_PER_NIGHT;

SELECT * FROM LISTINGS ORDER BY PRICE_PER_NIGHT DESC;

SELECT * FROM BOOKINGS WHERE GUEST_ID = 2;

SELECT * FROM LISTINGS WHERE PRICE_PER_NIGHT BETWEEN 100 AND 300;

-- Aggregations and groupings

SELECT COUNT(*) AS NUMBER_OF_LISTINGS, LOCATION AS CITY FROM LISTINGS GROUP BY LOCATION;

SELECT L.LOCATION, AVG(R.RATING) FROM LISTINGS L JOIN REVIEWS R ON L.LISTING_ID = R.LISTING_ID GROUP BY L.LOCATION;

SELECT U.NAME, COALESCE(SUM(P.AMOUNT), 0) AS TOTAL_EARNINGS
FROM USERS U
JOIN LISTINGS L ON U.USER_ID = L.HOST_ID
JOIN BOOKINGS B ON L.LISTING_ID = B.LISTING_ID
JOIN PAYMENTS P ON B.BOOKING_ID = P.BOOKING_ID
WHERE U.ACCOUNT_TYPE = 'HOST' 
AND P.PAYEMENT_STATUS = 'COMPLETED'
GROUP BY U.USER_ID;

SELECT 
    DATE_FORMAT(START_DATE, '%Y-%m') AS MONTH, 
    COUNT(*) AS TOTAL_BOOKINGS
FROM BOOKINGS
GROUP BY MONTH
ORDER BY MONTH;


-- Joins and Subqueries


SELECT * FROM USERS U 
JOIN  LISTINGS L ON U.USER_ID = L.HOST_ID
JOIN BOOKINGS B ON L.LISTING_ID = B.LISTING_ID;


SELECT L.TITLE, L.LOCATION, AVG(R.RATING) FROM LISTINGS L
JOIN REVIEWS R ON L.LISTING_ID = R.LISTING_ID
GROUP BY R.LISTING_ID;

SELECT U.* 
FROM USERS U
LEFT JOIN LISTINGS L ON U.USER_ID = L.HOST_ID
LEFT JOIN BOOKINGS B ON L.LISTING_ID = B.LISTING_ID
WHERE B.BOOKING_ID IS NULL AND U.ACCOUNT_TYPE = 'HOST';

SELECT L.*, COUNT(B.BOOKING_ID) AS TOTAL_BOOKINGS
FROM LISTINGS L
JOIN BOOKINGS B ON B.LISTING_ID = L.LISTING_ID
GROUP BY L.LISTING_ID
ORDER BY TOTAL_BOOKINGS DESC
LIMIT 1;

-- Advanced Queries

SELECT U.*, SUM(B.TOTAL_PRICE) AS TOTAL_AMOUNT FROM USERS U 
JOIN BOOKINGS B ON B.GUEST_ID = U.USER_ID
GROUP BY U.USER_ID
HAVING  SUM(B.TOTAL_PRICE) > 1000;


SELECT * FROM LISTINGS L
LEFT JOIN REVIEWS R ON R.LISTING_ID = L.LISTING_ID
WHERE L.LISTING_ID = NULL;



SELECT L.TITLE, AVG(R.RATING) AS AVERAGE_RATING
FROM LISTINGS L
JOIN REVIEWS R ON R.LISTING_ID = L.LISTING_ID
GROUP BY L.LISTING_ID, L.TITLE
ORDER BY AVERAGE_RATING DESC
LIMIT 3;


SELECT U.NAME, COUNT(U.USER_ID) AS TOTAL_BOOKINGS FROM USERS U
JOIN BOOKINGS B ON U.USER_ID = B.GUEST_ID
GROUP BY U.USER_ID
ORDER BY TOTAL_BOOKINGS DESC;
